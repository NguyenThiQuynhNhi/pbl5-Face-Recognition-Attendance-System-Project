import tkinter
import cv2
from PIL import Image, ImageTk
import tkinter.messagebox
import datetime
import mysql.connector
import face_recognition
import os
import numpy as np
import serial
import time

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a ·∫£nh nh√¢n vi√™n
DATA_PATH = "D:/SEM6/PBL5/Face-Recognition/src/python/data/image"

# ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u ·∫£nh ch·∫•m c√¥ng
PROOF_PATH = "D:/SEM6/PBL5/Face-Recognition/src/python/data/proofs/"

# ƒê·∫£m b·∫£o th∆∞ m·ª•c l∆∞u ·∫£nh ch·∫•m c√¥ng t·ªìn t·∫°i
if not os.path.exists(PROOF_PATH):
    os.makedirs(PROOF_PATH)

# D√πng camera m√°y
# class MyVideoCapture:
#     def __init__(self, video_source=0):
#         # M·ªü camera
#         self.vid = cv2.VideoCapture(video_source)
#         if not self.vid.isOpened():
#             raise ValueError("Kh√¥ng th·ªÉ m·ªü camera")
# 
#     def __del__(self):
#         # ƒê√≥ng camera khi kh√¥ng d√πng n·ªØa
#         if self.vid.isOpened():
#             self.vid.release()
# 
#     def get_frame(self):
#         # L·∫•y khung h√¨nh t·ª´ camera
#         ret, frame = self.vid.read()
#         if ret:
#             frame = cv2.resize(frame, (640, 480))
#             return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
#         return (ret, None)

# D√ôNG CAMERA ESP32
class MyVideoCapture:
    def __init__(self, video_source="http://172.20.10.5:81/stream"):
        print("ƒêang m·ªü camera t·ª´:", video_source)
        self.video_source = video_source
        self.stream = cv2.VideoCapture(video_source)
        if not self.stream.isOpened():
            print("L·ªñI: Kh√¥ng th·ªÉ m·ªü stream t·ª´ ESP32-CAM!")
            raise ValueError("Unable to open ESP32-CAM stream", video_source)
        else:
            print("Camera ESP32-CAM ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!")

        self.width = 640
        self.height = 480

    def __del__(self):
        if self.stream.isOpened():
            self.stream.release()

    def get_frame(self):
        ret, frame = self.stream.read()
        if ret:
            # ƒê√¥i khi ESP32 tr·∫£ v·ªÅ h√¨nh JPEG kh√¥ng ho√†n ch·ªânh, c·∫ßn x·ª≠ l√Ω l·∫°i
            try:
                frame = cv2.resize(frame, (self.width, self.height))
                return ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω h√¨nh ·∫£nh t·ª´ ESP32-CAM: {e}")
                return False, None
        else:
            print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame t·ª´ ESP32-CAM!")
            return False, None

class App:
    def __init__(self, window, window_title, listimg):
        self.listimg = listimg
        self.window = window
        self.window.config(bg="#FFC470")
        self.window.title(window_title)
        self.window.geometry(f"+{450}+{100}")
        self.vid = MyVideoCapture("http://172.20.10.5:81/stream")  # S·ª≠ d·ª•ng ESP32 camera
        self.canvas = tkinter.Canvas(window, width=self.vid.width, height=self.vid.height)
        self.canvas.pack()
        
        # Auto-check functionality
        self.last_check_time = 0
        self.check_interval = 5  # Check every 5 seconds
        self.last_recognized_employee = None
        self.last_recognized_time = 0
        self.cooldown_period = 30  # 30 seconds cooldown before recognizing the same person again
        
        self.delay = 1
        self.update()
        self.window.mainloop()

    def update(self):
        # C·∫≠p nh·∫≠t khung h√¨nh t·ª´ camera l√™n giao di·ªán
        ret, frame = self.vid.get_frame()
        if ret:
            self.photo = ImageTk.PhotoImage(image=Image.fromarray(frame))
            self.canvas.create_image(0, 0, image=self.photo, anchor=tkinter.NW)
            
            # Auto check face every 5 seconds
            current_time = time.time()
            if current_time - self.last_check_time >= self.check_interval:
                self.last_check_time = current_time
                self.check_face(frame)
                
        self.window.after(self.delay, self.update)

    def check_face(self, frame):
        # Chu·∫©n b·ªã ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán
        frame = cv2.resize(frame, (0, 0), None, fx=0.5, fy=0.5)
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        encodeface = face_recognition.face_encodings(frame)
        if not encodeface:
            return

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ so s√°nh
        if not self.listimg.encodelist:
            return

        # So s√°nh khu√¥n m·∫∑t
        best_match_index = None
        best_match_distance = float('inf')
        for index, known_encodings in enumerate(self.listimg.encodelist):
            distances = face_recognition.face_distance(known_encodings, encodeface[0])
            min_distance = min(distances)
            if min_distance < best_match_distance:
                best_match_distance = min_distance
                best_match_index = index

        # Chuy·ªÉn kho·∫£ng c√°ch th√†nh t·ª∑ l·ªá ph·∫ßn trƒÉm gi·ªëng
        similarity_percentage = (1 - best_match_distance) * 100
        # print(f"T·ª∑ l·ªá gi·ªëng: {similarity_percentage:.2f}%")

        # Ng∆∞·ª°ng nh·∫≠n di·ªán: 50% (t∆∞∆°ng ·ª©ng v·ªõi kho·∫£ng c√°ch 0.5)
        if similarity_percentage >= 50:
            current_time = time.time()
            employee_id = self.listimg.classname[best_match_index]
            
            # Check if this is the same employee and within cooldown period
            if (self.last_recognized_employee == employee_id and 
                current_time - self.last_recognized_time < self.cooldown_period):
                return
                
            # Update last recognized employee and time
            self.last_recognized_employee = employee_id
            self.last_recognized_time = current_time
            
            # Process attendance automatically
            self.process_attendance(employee_id, self.listimg.namect[best_match_index], frame)

    def process_attendance(self, employee_id, employee_name, frame):
        now = datetime.datetime.now()
        sql_datetime = now.strftime('%Y-%m-%d %H:%M:%S')
        today = now.strftime('%Y-%m-%d')
        timestamp = now.strftime('%Y%m%d_%H%M%S')

        # L∆∞u ·∫£nh ch·∫•m c√¥ng
        photo_proof = None
        if frame is not None:
            # ƒê·∫∑t t√™n file ·∫£nh: <employee_id>_<attendance_id>_<timestamp>.jpg
            # ki·ªÉm tra ng√†y th√°ng v√† l∆∞u v√†o folder(t·∫°o n·∫øu ch∆∞a c√≥) theo c·∫•u tr√∫c yyyy/mm/dd
            date_folder = now.strftime('%Y/%m/%d')
            full_proof_path = os.path.join(PROOF_PATH, date_folder)
            if not os.path.exists(full_proof_path):
                os.makedirs(full_proof_path)
            photo_filename = f"{employee_name}_{employee_id}_{timestamp}.jpg"
            photo_path = os.path.join(full_proof_path, photo_filename)

            # Chuy·ªÉn ƒë·ªïi khung h√¨nh t·ª´ RGB sang BGR ƒë·ªÉ l∆∞u b·∫±ng OpenCV
            frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            cv2.imwrite(photo_path, frame_bgr)
            # ƒê∆∞·ªùng d·∫´n l∆∞u v√†o database (ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ truy c·∫≠p qua URL)
            photo_proof = f"/proofs/{photo_filename}"

        # K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="employee_management"
        )
        cursor = connection.cursor()
        cursor.execute(f"SELECT * FROM attendance WHERE employee_id='{employee_id}' AND DATE(date_n_time) = '{today}'")
        result = cursor.fetchall()

        # X√°c ƒë·ªãnh tr·∫°ng th√°i ch·∫•m c√¥ng
        status = "Enough"
        if not result:
            # Ch∆∞a c√≥ b·∫£n ghi n√†o trong ng√†y
            cursor.execute(f"INSERT INTO attendance (employee_id, date_n_time, in_out, status, photo_proof) VALUES ('{employee_id}', '{sql_datetime}', 'In', '{status}', '{photo_proof}')")
            print(f"‚úÖ ƒê√£ ch·∫•m c√¥ng v√†o l√†m cho nh√¢n vi√™n: {employee_name}")
        else:
            # ƒê√£ c√≥ b·∫£n ghi trong ng√†y
            last_record = result[-1]
            if last_record[3] == 'In':
                # N·∫øu l·∫ßn cu·ªëi l√† check-in, th√¨ l·∫ßn n√†y l√† check-out
                cursor.execute(f"INSERT INTO attendance (employee_id, date_n_time, in_out, status, photo_proof) VALUES ('{employee_id}', '{sql_datetime}', 'Out', '{status}', '{photo_proof}')")
                print(f"‚úÖ ƒê√£ ch·∫•m c√¥ng ra v·ªÅ cho nh√¢n vi√™n: {employee_name}")
            else:
                # N·∫øu l·∫ßn cu·ªëi l√† check-out, th√¨ l·∫ßn n√†y l√† check-in m·ªõi
                cursor.execute(f"INSERT INTO attendance (employee_id, date_n_time, in_out, status, photo_proof) VALUES ('{employee_id}', '{sql_datetime}', 'In', '{status}', '{photo_proof}')")
                print(f"‚úÖ ƒê√£ ch·∫•m c√¥ng v√†o l√†m cho nh√¢n vi√™n: {employee_name}")

        connection.commit()
        cursor.close()
        connection.close()

        # G·ª≠i th√¥ng tin ƒë·∫øn Arduino LCD qua c·ªïng COM5
        try:
            print("ƒêang k·∫øt n·ªëi v·ªõi Arduino qua c·ªïng COM5...")
            ser = serial.Serial('COM5', 9600, timeout=1)
            time.sleep(2)  # ƒê·ª£i Arduino kh·ªüi ƒë·ªông
            
            # G·ª≠i t√™n nh√¢n vi√™n
            ser.write((employee_name + '\n').encode('utf-8'))
            time.sleep(0.5)  # Th√™m th·ªùi gian ch·ªù ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i
            ser.flush()  # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i h·∫øt
            
            print(f"üü¢ G·ª≠i th√†nh c√¥ng ƒë·∫øn Arduino: {employee_name}")
            ser.close()
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Arduino qua c·ªïng COM5: {str(e)}")
            if 'ser' in locals():
                ser.close()

class loadimg:
    def __init__(self):
        self.classname = []  # M√£ nh√¢n vi√™n
        self.namect = []    # T√™n nh√¢n vi√™n
        self.encodelist = []  # Danh s√°ch m√£ h√≥a khu√¥n m·∫∑t

        # K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="employee_management"
        )
        cursor = connection.cursor()
        cursor.execute("SELECT employee_id, employee_name FROM employees")
        employees = cursor.fetchall()

        # L·∫•y th√¥ng tin nh√¢n vi√™n v√† m√£ h√≥a ·∫£nh
        for employee in employees:
            employee_id = employee[0]
            employee_name = employee[1]
            employee_dir = os.path.join(DATA_PATH, str(employee_id))
            if not os.path.exists(employee_dir):
                print(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {employee_dir}")
                continue

            # L·∫•y t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c c·ªßa nh√¢n vi√™n
            image_files = [f for f in os.listdir(employee_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp'))]
            if not image_files:
                print(f"Kh√¥ng c√≥ ·∫£nh trong th∆∞ m·ª•c: {employee_dir}")
                continue

            # M√£ h√≥a t·∫•t c·∫£ ·∫£nh c·ªßa nh√¢n vi√™n
            employee_encodings = []
            for img_file in image_files:
                img_path = os.path.join(employee_dir, img_file)
                try:
                    img = Image.open(img_path).convert("RGB")
                    img_array = np.array(img)
                    if img_array.dtype != np.uint8:
                        img_array = img_array.astype(np.uint8)
                    if len(img_array.shape) != 3 or img_array.shape[2] != 3:
                        print(f"·∫¢nh kh√¥ng ·ªü ƒë·ªãnh d·∫°ng RGB 3 k√™nh: {img_path}")
                        continue
                    encodings = face_recognition.face_encodings(img_array)
                    if encodings:
                        employee_encodings.append(encodings[0])
                    else:
                        print(f"Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh: {img_path}")
                except Exception as e:
                    print(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {img_path}: {e}")
                    continue

            if employee_encodings:
                self.classname.append(str(employee_id))
                self.namect.append(employee_name)
                self.encodelist.append(employee_encodings)
            else:
                print(f"Kh√¥ng c√≥ m√£ h√≥a h·ª£p l·ªá cho nh√¢n vi√™n {employee_id}")

        cursor.close()
        connection.close()

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
App(tkinter.Tk(), "H·ªá th·ªëng ch·∫•m c√¥ng t·ª± ƒë·ªông", loadimg())